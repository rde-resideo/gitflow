name: deploy-to-hotfix-cms-vercel
# **What it does**: On manual trigger, it deploys hotfix branch code to Hotfix environment both for Sitecore CMS and Vercel.

on:
  workflow_dispatch:
    inputs:
      Environment:
        type: choice
        required: true
        description: "Deployment Environment"
        options: 
        - Hotfix
      GitBranch:
        type: choice
        required: true
        description: "Git Branch"
        options: 
        - hotfix
      DeployToCMS:
        description: "Deploy to Sitecore CMS"
        type: boolean
        default: true
        required: true
      DeployToVercel:
        description: "Deploy to Vercel"
        type: boolean
        default: true
        required: true

env:
  Environment: ${{ inputs.Environment }}
  GitBranch: ${{ inputs.GitBranch }}
  DeployToCMS: ${{ inputs.DeployToCMS }}
  DeployToVercel: ${{ inputs.DeployToVercel }}

  APP_LOCATION: '/' # location of your client code
  GITHUB_CONTEXT: ${{ toJson(github) }}  
  ACR_CD_IMAGE: ${{ secrets.REGISTRY_URI }}/${{ secrets.ACR_CD_IMAGE }}
  ACR_CM_IMAGE: ${{ secrets.REGISTRY_URI }}/${{ secrets.ACR_CM_IMAGE }}
  ACR_ID_IMAGE: ${{ secrets.REGISTRY_URI }}/${{ secrets.ACR_ID_IMAGE }}
  NEW_IMAGE_TAG: $("${{ github.sha }}".SubString(0, 7))
  
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NPM_PKG_GITHUB_AUTH_TOKEN: ${{ secrets.NPM_PKG_GITHUB_AUTH_TOKEN }}
  GRAPHQL_PERSISTED_QUERIES_AUTH_TOKEN: ${{ secrets.GRAPHQL_PERSISTED_QUERIES_AUTH_TOKEN }}
  # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
    contents: read

jobs:
  task1-print-inputs:
    name: "1-Print User Selection"
    runs-on: ubuntu-latest
    steps:
    - name: "User Selection"
      run: |
          echo "Environment : $Environment"
          echo "GitBranch : ${{ inputs.GitBranch }}"
          echo "DeployToCMS : ${{ inputs.DeployToCMS }}"
          echo "DeployToVercel : $DeployToVercel"

  task2-cms-deploy:
    name: "2-Deploy to CMS (Staging)"   # Image Tagging, Deploy to Staging, CM Config Patching
    needs: [task1-print-inputs]
    if: ${{ github.event.inputs.DeployToCMS  == 'true' }}
    permissions:
      contents: read # for actions/checkout to fetch code
      pull-requests: write # for Azure/static-web-apps-deploy to comment on PRs
    runs-on: ubuntu-latest
    outputs:
      Config: ${{ steps.cdApp.outputs.Config }}
      PatchingStatus: ${{ steps.cmConfigPatching.outputs.Status }}
      RestoreStatus: ${{ steps.cmConfigRestore.outputs.Status }}
    environment:
      name: Hotfix
      url: https://hauthor.prostore.resideo.com

    steps:
    - name: 'Read Production Config'
      if: true
      id: cdApp
      run: |
        #$configVal=$(az webapp config appsettings list --name "hotfixapp" --resource-group "hotfix-sc-eu2-svcecomm-rg" --query "[?contains('CurrentSettings', name)].{Value:value}"  -o tsv)
        echo "::set-output name=Config::'configValWeb'"
        
    - name: 'CM Config Patching Done'
      if: true
      id: cmConfigPatching
      run: |
        echo "::set-output name=Status::true"
        
    - name: 'CM Config Patching Done'
      if: true
      id: cmConfigRestore
      run: |
        echo "::set-output name=Status::true"

    - name: 'Print Production Config'
      if: true
      run: |
        echo ${{ steps.cdApp.outputs.Config }}

    - name: Job Failed
      if: ${{ failure() && steps.getProdConfig.conclusion == 'failure' }}
      run: |
        echo 'Job Failed'

  task3-cms-content-sync:
    name: "3-Sync CMS Content"
    needs: [task2-cms-deploy]
    runs-on: ubuntu-latest
    environment:
      name: Hotfix
    steps:
    - name: "User Selection"
      run: |
          echo "Environment : ${{ inputs.Environment }}"

  task4-vercel-preview-deploy:
    name: "4-Deploy to Vercel (Preview)"
    runs-on: ubuntu-latest
    needs: [task3-cms-content-sync]
    if: |
      always() &&
      github.event.inputs.DeployToVercel  == 'true' &&
      (needs.task3-cms-content-sync.result == 'success')

    environment:
      name: HotfixNoApproval
      url: https://resideo-hotfix-preview.vercel.app/us/en/pro

    steps:
    - name: "Print Current Settings from Job1"
      run: |
          echo ${{ needs.deploy-to-cms.outputs.Config }}

# Testing Preview site here

  task5-approve-deployment:
    name: "5-Validate Preview Deployment"
    needs: [task4-vercel-preview-deploy]
    runs-on: ubuntu-latest
    environment:
      name: Hotfix
    steps:
    - name: "User Selection"
      run: |
          echo "Environment : ${{ inputs.Environment }}"

  task6-swap-cms:
    name: "6-Promote CMS"
    needs: [task5-approve-deployment]
    runs-on: ubuntu-latest
    environment:
      name: HotfixNoApproval
    steps:
    - name: "User Selection"
      run: |
          echo "Environment : ${{ inputs.Environment }}"

  task7-swap-vercel:
    name: "7-Promote Vercel"
    needs: [task6-swap-cms]
    runs-on: ubuntu-latest
    environment:
      name: HotfixNoApproval
    steps:
    - name: "User Selection"
      run: |
          echo "Environment : ${{ inputs.Environment }}"
          
  task8-deployment-completed:
    name: "8-Deployment Successful"
    needs: [task7-swap-vercel]
    runs-on: ubuntu-latest
    environment:
      name: HotfixNoApproval
    steps:
    - name: "Deployment Successful"
      run: |
          echo "${{ inputs.Environment }} Deployment Successful"
          
  task9-rollback-on-error:
    name: "9-Rollback On Error"
    needs: [task2-cms-deploy, task8-deployment-completed]
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    environment:
      name: HotfixNoApproval
    env:
      Config: ${{needs.task2-cms-deploy.outputs.Config}}
      PatchingStatus: ${{needs.task2-cms-deploy.outputs.PatchingStatus}}
      RestoreStatus: ${{needs.task2-cms-deploy.outputs.RestoreStatus}}
    steps:
    - name: "Rollback CM Config"
      if: ${{ env.PatchingStatus == 'true' }}
      run: |
          echo "Rollback $Environment CM Config changes"
    
    - name: "No Rollback Required"
      if: ${{ env.PatchingStatus != 'true' }}
      run: |
          echo "No Rollback Required"

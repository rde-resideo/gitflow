name: deploy-to-hotfix-cms-vercel
# **What it does**: On manual trigger, it deploys hotfix branch code to Hotfix environment both for Sitecore CMS and Vercel.

on:
  workflow_dispatch:
    inputs:
      Environment:
        type: choice
        required: true
        description: "Deployment Environment"
        options: 
        - Hotfix
      GitBranch:
        type: choice
        required: true
        description: "Git Branch"
        options: 
        - hotfix
      DeployToCMS:
        description: "Deploy to Sitecore CMS"
        type: boolean
        default: true
        required: true
      DeployToVercel:
        description: "Deploy to Vercel"
        type: boolean
        default: true
        required: true

env:
  Environment: ${{ inputs.Environment }}
  GitBranch: ${{ inputs.GitBranch }}
  DeployToCMS: ${{ inputs.DeployToCMS }}
  DeployToVercel: ${{ inputs.DeployToVercel }}

  APP_LOCATION: '/' # location of your client code
  GITHUB_CONTEXT: ${{ toJson(github) }}  
  ACR_CD_IMAGE: ${{ secrets.REGISTRY_URI }}/${{ secrets.ACR_CD_IMAGE }}
  ACR_CM_IMAGE: ${{ secrets.REGISTRY_URI }}/${{ secrets.ACR_CM_IMAGE }}
  ACR_ID_IMAGE: ${{ secrets.REGISTRY_URI }}/${{ secrets.ACR_ID_IMAGE }}
  NEW_IMAGE_TAG: $("${{ github.sha }}".SubString(0, 7))
  
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NPM_PKG_GITHUB_AUTH_TOKEN: ${{ secrets.NPM_PKG_GITHUB_AUTH_TOKEN }}
  GRAPHQL_PERSISTED_QUERIES_AUTH_TOKEN: ${{ secrets.GRAPHQL_PERSISTED_QUERIES_AUTH_TOKEN }}
  # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
    contents: read

jobs:
  task1:
    name: "TASK 1 : Print User Selection"
    runs-on: ubuntu-latest
    steps:
    - name: "User Selection"
      run: |
          echo "Environment : ${{ inputs.Environment }}"
          echo "GitBranch : ${{ inputs.GitBranch }}"
          echo "DeployToCMS : ${{ inputs.DeployToCMS }}"
          echo "DeployToVercel : ${{ inputs.DeployToVercel }}"

  task2-cms-deploy:
    name: "TASK 2 : Deploy to CMS Staging"   # Image Tagging, Deploy to Staging, CM Config Patching
    if: ${{ github.event.inputs.DeployToCMS  == 'true' }}
    permissions:
      contents: read # for actions/checkout to fetch code
      pull-requests: write # for Azure/static-web-apps-deploy to comment on PRs
    runs-on: ubuntu-latest
    outputs:
      Config: ${{ steps.cdApp.outputs.Config }}
    environment:
      name: Hotfix

    steps:
    - name: 'Read Production Config'
      if: true
      id: cdApp
      run: |
        #$configVal=$(az webapp config appsettings list --name "hotfixapp" --resource-group "hotfix-sc-eu2-svcecomm-rg" --query "[?contains('CurrentSettings', name)].{Value:value}"  -o tsv)
        echo "::set-output name=Config::'configValWeb'"

    - name: 'Print Production Config'
      if: true
      run: |
        echo ${{ steps.cdApp.outputs.Config }}

    - name: Job Failed
      if: ${{ failure() && steps.getProdConfig.conclusion == 'failure' }}
      run: |
        echo 'Job Failed'

  task3-cms-content-sync:
    name: "TASK 3 : Sync CMS Content"
    runs-on: ubuntu-latest
    steps:
    - name: "User Selection"
      run: |
          echo "Environment : ${{ inputs.Environment }}"

  task4-vercel-preview-deploy:
    name: "TASK 4 : Deploy to Vercel Preview"
    runs-on: ubuntu-latest
    needs: [task2-cms-deploy]
    if: |
      always() &&
      github.event.inputs.DeployToVercel  == 'true' &&
      (needs.job2-cms-deploy.result == 'success' || needs.job2-cms-deploy.result == 'skipped')

    environment:
      name: Hotfix

    steps:
    - name: "Print Current Settings from Job1"
      run: |
          echo ${{ needs.deploy-to-cms.outputs.Config }}

# Testing Preview site here

  task5-approve-reject-deployment:
    name: "TASK 5 : Approve Preview Deployment"
    runs-on: ubuntu-latest
    steps:
    - name: "User Selection"
      run: |
          echo "Environment : ${{ inputs.Environment }}"

  task6-swap-cms:
    name: "TASK 6 : job6-swap-cms"
    runs-on: ubuntu-latest
    steps:
    - name: "User Selection"
      run: |
          echo "Environment : ${{ inputs.Environment }}"
  task7-swap-vercel:
    name: "TASK 7 : job7-swap-vercel"
    runs-on: ubuntu-latest
    steps:
    - name: "User Selection"
      run: |
          echo "Environment : ${{ inputs.Environment }}"
          
  task8-cancel-rollback-cm-configs:
    name: "TASK 8 : job8-cancel-rollback-cm-configs"
    runs-on: ubuntu-latest
    steps:
    - name: "User Selection"
      run: |
          echo "Environment : ${{ inputs.Environment }}"
